// <auto-generated />
using System;
using Infrastructure.Persistence.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive", "en-u-ks-primary,en-u-ks-primary,icu,False")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ChandaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("ChandaTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chanda_type_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("InvoiceItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_item_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.HasKey("Id");

                    b.HasIndex("ChandaTypeId");

                    b.HasIndex("InvoiceItemId");

                    b.ToTable("chanda_items", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ChandaType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code")
                        .UseCollation("case_insensitive");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .UseCollation("case_insensitive");

                    b.Property<Guid>("IncomeAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("income_account_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("chanda_type", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Circuit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("circuits", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("JamaatId")
                        .HasColumnType("uuid")
                        .HasColumnName("jamaat_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("JamaatId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("MonthPaidFor")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("month_paid_for");

                    b.Property<Guid>("PayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("payer_id");

                    b.Property<string>("ReceiptNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receipt_no")
                        .UseCollation("case_insensitive");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PayerId");

                    b.HasIndex("ReceiptNo")
                        .IsUnique();

                    b.ToTable("invoice_items", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Jamaat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CircuitId")
                        .HasColumnType("uuid")
                        .HasColumnName("circuit_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JamaatLedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("jamaat_ledger_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.ToTable("jamaats", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.JamaatLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JamaatId")
                        .HasColumnType("uuid")
                        .HasColumnName("jamaat_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.HasKey("Id");

                    b.HasIndex("JamaatId")
                        .IsUnique();

                    b.ToTable("jamaat_ledgers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ledger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("ChandaTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chanda_type_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entry_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("JamaatLedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("jamaat_ledger_id");

                    b.Property<Guid?>("MemberLedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_ledger_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("MonthPaidFor")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("month_paid_for");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("ChandaTypeId");

                    b.HasIndex("JamaatLedgerId");

                    b.HasIndex("MemberLedgerId");

                    b.ToTable("ledgers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChandaNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("chanda_no")
                        .UseCollation("case_insensitive");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .UseCollation("case_insensitive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JamaatId")
                        .HasColumnType("uuid")
                        .HasColumnName("jamaat_id");

                    b.Property<Guid>("MemberLedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_ledger_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone_no")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("ChandaNo")
                        .IsUnique();

                    b.HasIndex("JamaatId");

                    b.ToTable("members", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MemberLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("member_ledgers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MemberRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_name")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("RoleId");

                    b.ToTable("member_roles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modified_by")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("option");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description")
                        .UseCollation("case_insensitive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .UseCollation("case_insensitive");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc5cee06-b785-418b-a46a-47564dd30ee2"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Full administrative access across the system.",
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("96b6cf88-596a-4545-ae5d-508b1dfebd97"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Head of AMJN",
                            IsDeleted = false,
                            Name = "Amir"
                        },
                        new
                        {
                            Id = new Guid("7c056012-ef3f-49e3-917a-b1e375b8f878"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Acting Head of AMJN",
                            IsDeleted = false,
                            Name = "Acting-Amir"
                        },
                        new
                        {
                            Id = new Guid("e12b063b-6f55-4693-88cf-363d6f11d82b"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Naib Amir",
                            IsDeleted = false,
                            Name = "Naib-Amir"
                        },
                        new
                        {
                            Id = new Guid("5e87bd2d-b0fe-40b3-86ff-9ca50b20fec6"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "National General Secretary.",
                            IsDeleted = false,
                            Name = "Nationa-Gen-Sec"
                        },
                        new
                        {
                            Id = new Guid("669d4318-deaa-41ed-b194-3fc12ca75690"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "National Financial Secretary",
                            IsDeleted = false,
                            Name = "National-Fin-Sec"
                        },
                        new
                        {
                            Id = new Guid("2fbccc80-21b0-47de-913e-997ad74962d1"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "National Tajneed Secretary",
                            IsDeleted = false,
                            Name = "National-Tajneed"
                        },
                        new
                        {
                            Id = new Guid("c01ca3a8-b854-43ae-b850-c961ea7b2732"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Circuit President.",
                            IsDeleted = false,
                            Name = "CP"
                        },
                        new
                        {
                            Id = new Guid("ea42d426-510d-410a-a608-34f476d6ee71"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Vice Circuit President.",
                            IsDeleted = false,
                            Name = "VCP"
                        },
                        new
                        {
                            Id = new Guid("037fd6c5-7825-4d95-9af3-6ddc18e32042"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Circuit Financial Secretary.",
                            IsDeleted = false,
                            Name = "Circuit-Fin-Sec"
                        },
                        new
                        {
                            Id = new Guid("07b877d5-ad8d-4249-adef-db34c9d0a459"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Jamaat Financial Secretary.",
                            IsDeleted = false,
                            Name = "Jamaat-Fin-Sec"
                        },
                        new
                        {
                            Id = new Guid("58c60045-eb2c-4562-9551-2aadbb2674b7"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Jamaat President.",
                            IsDeleted = false,
                            Name = "Jamaat-President"
                        },
                        new
                        {
                            Id = new Guid("e660bfe3-6bb5-486c-921f-40d32fd3a98b"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Circuit General Secretary.",
                            IsDeleted = false,
                            Name = "Circuit-Gen-Sec"
                        },
                        new
                        {
                            Id = new Guid("f5c1485c-9582-4b6b-9ab0-8543c06c87b0"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Jamaat General Secretary.",
                            IsDeleted = false,
                            Name = "Jamaat-Gen-Sec"
                        },
                        new
                        {
                            Id = new Guid("b6d89525-93e9-44c0-8a58-30686e883c2a"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 1, 1, 3, 10, 28, 488, DateTimeKind.Utc),
                            Description = "Jamaat Member.",
                            IsDeleted = false,
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ChandaItem", b =>
                {
                    b.HasOne("Domain.Entities.ChandaType", "ChandaType")
                        .WithMany()
                        .HasForeignKey("ChandaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.InvoiceItem", "InvoiceItem")
                        .WithMany("ChandaItems")
                        .HasForeignKey("InvoiceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChandaType");

                    b.Navigation("InvoiceItem");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Domain.Entities.Jamaat", "Jamaat")
                        .WithMany()
                        .HasForeignKey("JamaatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jamaat");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.Jamaat", b =>
                {
                    b.HasOne("Domain.Entities.Circuit", "Circuit")
                        .WithMany("Jamaats")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("Domain.Entities.JamaatLedger", b =>
                {
                    b.HasOne("Domain.Entities.Jamaat", "Jamaat")
                        .WithOne("JamaatLedger")
                        .HasForeignKey("Domain.Entities.JamaatLedger", "JamaatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jamaat");
                });

            modelBuilder.Entity("Domain.Entities.Ledger", b =>
                {
                    b.HasOne("Domain.Entities.ChandaType", "ChandaType")
                        .WithMany()
                        .HasForeignKey("ChandaTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JamaatLedger", "JamaatLedger")
                        .WithMany("LedgerList")
                        .HasForeignKey("JamaatLedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.MemberLedger", "MemberLedger")
                        .WithMany("LedgerList")
                        .HasForeignKey("MemberLedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChandaType");

                    b.Navigation("JamaatLedger");

                    b.Navigation("MemberLedger");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.HasOne("Domain.Entities.Jamaat", "Jamaat")
                        .WithMany("Members")
                        .HasForeignKey("JamaatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jamaat");
                });

            modelBuilder.Entity("Domain.Entities.MemberLedger", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithOne("MemberLedger")
                        .HasForeignKey("Domain.Entities.MemberLedger", "MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.MemberRole", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany("MemberRoles")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("MemberRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.Entities.Circuit", b =>
                {
                    b.Navigation("Jamaats");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceItem", b =>
                {
                    b.Navigation("ChandaItems");
                });

            modelBuilder.Entity("Domain.Entities.Jamaat", b =>
                {
                    b.Navigation("JamaatLedger")
                        .IsRequired();

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Domain.Entities.JamaatLedger", b =>
                {
                    b.Navigation("LedgerList");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Navigation("MemberLedger")
                        .IsRequired();

                    b.Navigation("MemberRoles");
                });

            modelBuilder.Entity("Domain.Entities.MemberLedger", b =>
                {
                    b.Navigation("LedgerList");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("MemberRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
